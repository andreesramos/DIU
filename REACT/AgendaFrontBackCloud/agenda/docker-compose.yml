version: '3.8' #Versión del fichero Docker-compose (si no se pone la etiqueta, se cogerá la versión 1 automáticamente
networks: #Define la/s redes que usarán los contenedores
  mired: #Nombre de la red
    ipam: #Administra las direcciones ips
      config: #Etiqueta usada para definir la configuración de la red
        - subnet: 182.28.0.0/16 #Aquí definimos la subred a usar
          gateway: 182.28.0.1 #Aquí definimos la puerta de enlace de la red
services: #Esta etiqueta es usada para definir los contenedores que instalaremos en Docker
  db: #Nombre del servicio
    image: bitnami/mongodb:latest #Especificamos la imagen a usar.
    container_name: mongo_DB #Nombre del contenedor en nuestro Docker
    networks:
      mired:
        ipv4_address: 182.28.0.11 #Dirección ip del contenedor
    ports:
      - "27017:27017" #Especificamos los puertos
    expose:
      - 27017 #Expone los puertos sin publicarlos al host.
    restart: always
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.runCommand('ping').ok" ]
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 5s

  app-agenda:
    image: andreesramos/agenda:2
    container_name: agendaapp
    networks:
      mired:
        ipv4_address: 182.28.0.13
    expose:
      - 81
    ports:
      - "81:8099"
    depends_on: #En esta etiqueta colocamos de qué servicio depende este contenedor
      db:
        condition: service_healthy
    restart: always

  app-tutorials:
    image: andreesramos/tutoriales:1
    container_name: tutorialsapp
    networks:
      mired:
        ipv4_address: 182.28.0.14
    expose:
      - 82
    ports:
      - "82:8098"
    depends_on: #En esta etiqueta colocamos de qué servicio depende este contenedor
      db:
        condition: service_healthy
    environment:
      - SPRING_DATA_MONGODB_HOST=mongo_DB
      - SPRING_DATA_MONGODB_PORT=27017
    restart: always